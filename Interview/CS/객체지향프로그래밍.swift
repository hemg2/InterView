//
//  객체지향프로그래밍.swift
//  Interview
//
//  Created by 1 on 2022/11/25.
//


/*
 객체 지향 프로그래밍(OOP)이 뭐에요?

 객체 지향 프로그래밍은 컴퓨터 프로그래밍 패러다임 중 하나로,
 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다.

 장점
 - 코드 재사용이 용이
 - 유지보수가 쉬움
 - 대형 프로젝트에 적합
 단점
 처리 속도가 상대적으로 느림
 객체가 많으면 용량이 커질 수 있음
 설계시 많은 시간과노력이 필요

 객체 지향 프로그래밍 키워드 5가지
 1. 클래스 + 인스턴스(객체)
 2. 추상화
 3. 캡슐화
 4. 상속
 5. 다형성

 클래스와 인스턴스(객체)는 무엇인지 설명해주세요.

 클래스 : 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성(attribute)과 행위(behavior)를 변수와 메서드로 정의한 것으로 객체를 만들기 위한 메타정보라고 볼 수 있다.
 인스턴스(객체) : 클래스에서 정의한 것을 토대로 실제 메모리에 할당된 것으로 실제 프로그램에서 사용되는 데이터

 객체 지향 프로그래밍에서 추상화 (자료의 추상화)

 객체 지향 프로그래밍에서는 '추상화' 라는 단어를 여러 군데 붙일 수 있다.
 여기서 말하는 추상화는 추상 클래스나 추상 클래스가 갖는 추상 메서드를 의미하기보다는 클래스를 설계하는 것 자체를 의미한다.
 즉, "공통의" 속성이나 기능을 묶어 이름을 붙이는 것이다.

 캡슐화가 무엇인가요?

 캡슐화의 목적 2가지
 1. 코드를 재수정 없이 재활용하는 것.
 2. 접근 제어자를 통한 정보 은닉
 절차 지향 프로그래밍에서도 라이브러리를 통해서 변수와 함수를 재활용할 수는 있었지만, 코드의 수정이 일어났을 때 영향 범위를 예상하기 어려운 문제가 있었다.
 그러나 객체 지향 프로그래밍에서는 캡슐화를 통해 객체가 외부에 노출하지 않아야할 정보 또는 기능을 접근제어자를 통해 적절히 제어 권한이 있는 객체에서만 접근하도록 할 수 있기에 코드의 수정이 일어났을 때 책임이 있는 객체만 수정하면 되기에 영향 범위를 예측하는데 수월해졌다.
 뿐만 아니라 관련된 기능과 특성을 한 곳에 모으고 분류하기 때문에 객체 재활용이 원활해졌다.
 객체 지향 프로그래밍에서 기능과 특성의 모음을 "클래스"라는 "캡슐"에 분류해서 넣는것이 캡슐화다.
 객체가 맡은 역할을 수행하기 위한 하나의 목적을 한데 묶는다.


 상속은 무엇인가요?

 절자 지향 프로그래밍에서도 "라이브러리"를 통해서 남이 짜놓은 소스 코드를 가져와 사용할 수 있었다.
 하지만 내 의도에 맞게 수정하게되면 다른 라이브러리가 되어 버전에 따라 동작하지 않을 수 있고 불필요한 코드의 수정작업을 해야한다는 것이다.
 이런 문제를 해결하기 위해 [상속]이라는 것을 도입하였다.
 상속은 부모클래스의 속성과 기능을 그대로 이어받아 사용할 수 있게하고 기능의 일부분을 변경해야 할 경우 상속받은 자식클래스에서 해당 기능만 다시 수정(정의)하여 사용할 수 있게 하는 것이다.


 다형성은 무엇인가요?

 하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있는 것이다.
 즉 오버라이딩(Overriding), 오버로딩(Overloading)이 가능하다는 얘기다.
 오버라이딩 : 부모클래스의 메서드와 같은 이름, 매개변수를 재정의 하는것.
 오버로딩 : 같은 이름의 함수를 여러개 정의하고, 매개변수의 타입과 개수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있게 하는 것.


 
 
 깃헙
 객체 지향적 설계 원칙

 SRP(Single Responsibility Principle) : 단일 책임 원칙
 클래스는 단 하나의 책임을 가져야 하며 클래스를 변경하는 이유는 단 하나의 이유이어야 한다.
 OCP(Open-Closed Principle) : 개방-폐쇄 원칙
 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.
 LSP(Liskov Substitution Principle) : 리스코프 치환 원칙
 상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 한다.
 ISP(Interface Segregation Principle) : 인터페이스 분리 원칙
 인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다.
 DIP(Dependency Inversion Principle) : 의존 역전 원칙
 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안된다.

 */
