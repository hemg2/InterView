//
//  struct와 class와 enum의 차이.swift
//  Interview
//
//  Created by 1 on 2022/12/06.
//

import Foundation
/*
 클래스(class)

 참조 타입으로 값을 전달시 참조(주소, 포인터와 유사)가 전달된다.
 상속이 가능하다.
 ARC로 참조 횟수를 계산하여 메모리를 관리한다.
 타입캐스팅은 클래스의 인스턴스에만 가능하다.
 구조체(struct)

 값 타입이다.
 데이터를 전달할 때 값을 복사하여 전달한다(처음에는 참조하다가, 값이 변경되면 그때 복사를 한다).
 Swift의 기본 데이터 타입은 모두 구조체로 구성되어 있다. 비효율적이라고 생각할 수 있으나, 스위프트는 꼭 필요한 경우에만 진짜 복사를 하며 효율적으로 처리한다.
 메모리의 Stack 영역에 저장되며, 일정 크기가 넘으면 Heap에 저장된다.
                           스택에 저장되어 빠르다      힙을쓰면 ARC가 적용된다.  스트럭트는 ARC가 필요없다
 열거형(enum)

 상속이 불가능하다.
 연관된 값의 집합을 정의한다.
 RawValue를 통해 원시값을 지정할 수 있다.

 언제 구조체를 쓸까?

 애플은 다음 조건 중 하나 이상에 해당한다면 구조체를 사용하는 것을 권장한다.
 연관된 간단한 값의 집합을 캡슐화하는 것만이 목적일 때
 캡슐화된 값을 참조하는 것보다 복사하는 것이 합당할 때
 구조체에 저장된 프로퍼티가 값 타입이며 참조하는 것보다 복사하는 것이 합당할 때
 다른 타입으로부터 상속을 받거나 자신을 상속할 필요가 없을 때
 이런 몇 가지 상황을 제외하고 클래스로 정의하여 사용한다.
 
 
 class, struct, enum의 공통점

 프로퍼티나 메서드를 정의할 수 있다.
 서브스크립트를 정의할 수 있다.
 이니셜라이저를 정의할 수 있다.
 익스텐션을 통해 확장할 수 있다.
 특정 프로토콜을 준수할 수 있다.
 
 
 
 
 
 
 Class - Reference type
 객체화 시 힙 메모리영역에 저장되며 ARC 로 객체의 메모리해제가 관리된다.
 대입 연산 시 레퍼런스가 복사되어 할당됨. (공유 가능)
 멀티스레딩 시 적절한 Lock 활용이 필요.
 상속 가능.
 Struct - Value type
 대입 연산 시 값 자체가 복제되어 할당됨(공유가 불가능).
 불변성(Immutable) 구현에 유리.
 멀티스레딩에 안전함.
 상속이 불가능. (protocol 은 사용 가능)
 
 차이점 제르시
 가장큰차이점 클래스-> 레퍼런스 타입 주소값만 복사
 스트럭트는 -> 벨류 타입 전부다 복사
 이것이 한줄요약이다
 한걸음더 한다면
 벨류 타입-> 매번 복사가 일어난다.
 값을 이동할때마다 복사가 된다 전달할때마다 복사가된다 전체복사
 
 클래스는 값을 전달할때마다 주소값만 전달된다.
 스트럭트는 a에서 바꿔도 bcd에서 안바낀다
 클래스는 바뀐다.
 
 레이블 -> 클래스
 model -> struct
 viewcontollre -> class
 복사하는건 클래스가 빠르다
 
 스택과 힙중에는 스택이 빠르다
 클래스는 힙 저장
 스트럭트는 스택 저장
 힙에 쓰기때문에 ARC 쓴다 ///왜 ARC가 쓰냐
 스트럭트는 ARC가 필요없다
 최대한 스트럭스쓰는게 좋다 빨라서
 
 왜 나머진 스트럭트는 쓰는게 좋냐 스트럭트는 스택에 저장되서 빨라서 한다.
 클래스는 힙에 저장해서 그렇다
 */
