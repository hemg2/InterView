//
//  REST API.swift
//  Interview
//
//  Created by 1 on 2022/11/26.
//

import Foundation
/*
 
 ## REST API란?

 - URI를 통해 자원(resource)명시 및 http method를 이용해 자원에대한 CRUD를 적용하는것.
 API 설계 아키텍처라고 생각된다.
 - 아키텍처의 일종이므로 모든 매뉴얼을 준수해야만 REST API라고 할 수 있는것은 아니다.

 ## REST API 의 특징?

 1. 일관적 인터페이스
     1. HTTP를 따르는 모든 플랫폼에서 사용가능
 2. 서버, 클라이언트의 명확한 구조
     1. 서버는 요청에대한 자료 클라이언트는 요청과, 세션관리
 3. 무상태성 ( 이전 요청이 다음요청에 영향을 주지않음. 서버가 세션, 쿠키를 관리하지않음. )
 4. 캐싱이 가능하다. ( HTTP 프로토콜을 따르므로 )
 5. URI로 자체표현이 가능하다.
     - URI와 method만 봐도 어떤 자원을 요청하는지 알 수 있다.

 - 아래의 URI 모습을 하고있다.

 ```swift
 ..com/v1/posts POST -> post 생성
 ..com/v1/posts GET -> post 전체 불러오기
 ..com/v1/posts/id GET -> 특정 post 불러오기
 ..com/v1/posts/id DELETE 특정 post 삭제
 ```

 ## 사용 장점

 위 특징을 참고하였을때..

 - Http 프로토콜을 따름으로서 기존인프라 활용가능 및 캐싱 가능
 - URI의 일관성으로 백엔드 구성에 편리해보인다.
 각 요청이 어떤 행동을 원하는지 URI만보고도 파악이된다.
 - 클라이언트 자원요청 서버는 자원반환의 명확한 구조로 서로간의 의존성이 낮음
 - 무상태성으로 서버에서 세션, 쿠키를 관리하지않아 구현이 보다 단순해짐

 ## Question

 ### Q1: REST 와 비슷한 Graphql이 있다. 차이점이 있는가?

 장점

 1. Fit한 데이터 요청 ( 언더, 오버 패칭 방지 ) → 변화하는 클라이언트 구조에 빠르게 대응가능
 2. 하나의 엔드포인트 ( 네트워크의 호출을 여러번 하지 않아도 됨 ) → 리소스 절약
 3. 기종에 상관없는 표준화된 쿼리 언어

 단점

 1. graphql의 다양한 데이터 요청을 서버에서 필터링해야하므로
 서버 개발자의 부담 증가
 2. 캐싱이 좀더 복잡하고, 기존 파일 업로드방식을 그대로 사용할 수없음.

 한줄 요약

 - REST API
 → ****HTTP 표준을 따르므로 HTTP 프로토콜의 장점은 따르며 REST API구축을 위해 별도의 인프라 구축이 필요없다. ( 간단 )
 - GraphQL
 → 다양한 클라이언트 구조에 빠르게 대응 가능, 네트워크 리소스 절약 가능, 유지보수 용이
 ****

 ### Q2: REST의 특징은 이 아키텍쳐를 사용하면 무조건 준수 해야하는 특징인가?

 아키텍처중 하나이므로 모든 내용을 완벽하게 준수해야만 REST API라고 할 수 있는것은
 아니라고 생각한다.

 ### Q3: 자원(resource)와 http method로만 URI를 표현할경우 표현이 애매한 경우가 있다. 이럴때는 어떻게 하고있는가?

 예외적으로 해당 URI에 동사를 포함하여 구분 하고있다.
 어떠한 아키텍처를 완벽히 매뉴얼하게 구현해야만 하는것은 아니라고 생각한다.
 
 */
