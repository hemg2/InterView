//
//  CS.swift
//  Interview
//
//  Created by 1 on 2022/12/01.
//

import Foundation
/*
 
 오픈소스를 커스터마이즈(맞춤정장느낌) 하여 특정 프로젝트를 구성해본 경험입니다.
 -> 없음. 따르 오픈소스를 있는 그대로 써볼려고했지.. 이걸 커스터마이즈 해볼 생각은 해본적이 없는거같습니다.
 
 -----------------------------------------------------------------------------------------------------------
 
 OOP란?
 -데이터를 추상화 시켜 객체를 만들고 객체끼리 유기적인 상호작용을 통해 로직을 구성하는것?
 키워드5가지
 클래스 객체, 캡술화, 추상화, 상속, 다형성
 솔리드 원칙
 단일책임원칙, 개방-폐쇄의원칙, 리스코프 치환원칙, 인터페이스분리원칙, 의존 역전 원칙
 
 장점
 -코드 재사용이 높다, 유지보수가 좋다, 대형프로젝트에 적합하다
 단점
 -처리속도가 느리다, 객체가많으면 용량이 커질 수 있다.
 
 
 
 -----------------------------------------------------------------------------------------------------------
 
 
 
 - **Singleton Pattern**
     - 특정 클래스에 대한 인스턴스를 단 한번만 static 메모리 영역에 할당하고 해당 클래스에 대한 생성자를 여러 번 호출하더라도 최초에 생성된 객체를 반환하는 디자인 패턴이다. 즉, 애플리케이션의 특정 클래스에 대한 유일 객체를 보장하는 디자인 형태.
     - 싱글톤의 장점?
         - 메모리 낭비를 방지 > 고정된 메모리 영억을 얻으면서 한번의 new로 인스턴스를 사용
         - 전역 인스턴스이기 때문에 데이터 공유하기 쉽다.
     - 싱글톤의 단점?
         - 싱글톤의 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우 결합도가 높아진다.
             
             → 개방폐쇄원칙을 위배(OOP 설계 원칙 어긋)
             
         - 동기화 처리를 안하면 인스턴스가 두개 생성되는 경우 발생
 
 
 -싱글콘 패턴이란?
 특정 용도로 객체를 하나만 생성하여, 공용으로 사용하고 싶을 때 사용하는 디자인 유형
 
 static을 사용해 싱글톤 객체 생성을한다
 
 class info {
 static let shared = info()
 
 var id : String?
 var password: String?
 var name: String?
 
 private init() { }
 //혹시라도 init함수를 호출해 instance를 또 생성하는것을 막기 위해, init()함수 접근 제어자를 private로 지정해주면 좋다.
 }
 
 사용할떄는
 let a = info.shared
 a.id = "bb"
 a.password = "asd  a.name = "asdsa 이렇게 접근할수있따.
 
 -----------------------------------------------------------------------------------------------------------
 
 
 
 -OSI 7계층에 대해서 설명해주세요
 : OSI 7계층은 하나의 네트워크 통신 모델로 네트워크 에서 통신이 일어나는 과정을 7단계로 나눈것을 말합니다.
 
 - 왜 7단계로 나눴나요?
 : 계층을 나눈 이유는 통신이 일어나는 과정을 단계별로 파악할 수 있기 떄문입니다.
 흐름을 한 눈에 알아보기 쉽고 사람들이 이해하기 쉽습니다.
 
 -그 예를 들어줄수 있나요?
 : PC방에서 게임을 하는 중 연결이 끊겼을때를 예를 들 수 있을거 같습니다.
 모든 PC에 문제가 있다면 라우터 혹은 꽝랜을 제공하는 회선문제로 볼 수 있습니다.
 한 PC만 문제가 있고 게임 SW에 문젝 있다면 7계층인 응용 계층의 문제로 볼 수 있고,
 게임 SW에는 문제가 없고 스위치에 문제가 있다면 2계층인 데이터링크 계층의 문제로 볼 수 있습니다.
 
 - 7계층의 종류는 무엇이 있나요?
 : 물리 계층, 데이터링크 계층, 네트워크 계층, 전송 계층, 세션 계층, 표현 계층, 응용 계층이 있습니다.
 
 - 각각의 계층에서 하는 일을 간단하게 얘기해 줄 수 있나요?
 1. 물리 계층은 실제 장치를 연결하는데 필요한 전기적, 물리적 세부 사항을 정의합니다. (허브, 리피터)
 2. 데이터 링크 계층은 MAC 주소를 통해 통신하며 안정적인 정보 전달을 위해 CRC기반의 오류제어와 흐름제어가 추가되었습니다.(스위치, 브릿지)
 3. 네트워크 계층은 데이터를 목적지까지 안전하고 빠르게 전달하기 위해 IP를 사용한 라우팅, 흐름제어, 단편화, 오류 제어 등을 수행 합니다.
 (라우터, Layer3 스위치) (PING 명령을 내렸는데 통신이 안된다면 3계층 이하에서의 문제입니다.)
 4. 전송 계층은 신뢰성 있는 데이터를 주고 받게 해주며 시퀀스 넘버 기반의 오류 제어방식을 사용합니다. (대표적인 프로토콜은 TCP)
 5. 세션 계층은 통신 경로 확립이나 단절, 전달 방식을 정합니다. (TCP/IP 세션을 만들고 없애는 책임을 가집니다.)
 6. 표현 계층은 데이터에 대한 동일한 형식을 제공하고 데이터 압축과 암호화 기능을 수행합니다.
 7. 응용 계층은 사용자나 응용 프로그램 사이에 데이터 교환을 가능하게 합니다.(HTTP, FTP 등)
 
 
 
 
 
 -----------------------------------------------------------------------------------------------------------
 
 
 - Compile Time and Run
 - CompileTime : 컴파일러가 타입 검증
 → 개발자가 작성한 언어를 컴퓨터가 인식할 수 있게 기계어 코드로 변환
 - RunTime : 컴파일 시 걸러내지 못하고 실행 시점에 오류가 발생
 → 컴파일 과정을 마쳐서 사용자에 의해 실행되어 짐
 
 -----------------------------------------------------------------------------------------------------------
 
 - **Blocking & Non-Blocking. 그리고 Sync, Async에 대해 설명.**
 
 - 제어권 소유 여부에 따라 블로킹 논블로킹이 결정
 - 블로킹 : 제어권이 호출된 함수에게 넘어가서 호출된 함수 내에서 작업이 모두 끝난 후 제어권이 돌아와서 실행
 - 논블로킹 : 제어권이 나한테 있으며 호출된 함수와 같이 실행
     
 
     -동기와 비동기는 프로세스의 수행 순서 보장에 대한 매커니즘
     -블록킹과 논블록킹은 프로세스의 유휴 상태에 대한 개념
 
 
 
 - **Deadlock의 정의와 조건?**

 -둘 이상의 프로세스 또는 스레드들이 자원을 점유한 상태에서 서로 다른 프로세스(스레드)가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상을 의미함
 -조건으로는 상호배제(Mutual Exclusion), 점유와 대기(Hold and Wait), 비선점(Non-preemption), 환형 대기(Circular Wait)이 있음
 
 -----------------------------------------------------------------------------------------------------------
 
 - **DI와 Service Locator의 차이점.**

 -DI는 일부 핵심 클래스에 종속성을 주입하고 Service Locator는 모든 클래스가 Service Locator에 종석되어 있음
 -DI는 처음 한번만 호출을 하며(명시적 호출x), Service Locator는 인젝터를 직접 호출함(명시적 호출)
 
 -----------------------------------------------------------------------------------------------------------
 
 
 
 */
